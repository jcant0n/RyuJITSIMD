<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BenchmarkDotNet.Core</name>
    </assembly>
    <members>
        <member name="T:BenchmarkDotNet.Attributes.CleanupAttribute">
            <summary>
            Marks method to be executed after benchmark.
            </summary>
        </member>
        <member name="T:BenchmarkDotNet.Attributes.DryConfigAttribute">
            <summary>
            This attribute has the same effect as writing <code>[Config("Jobs=Dry")]</code>
            </summary>
        </member>
        <member name="T:BenchmarkDotNet.Attributes.SetupAttribute">
            <summary>
            Marks method to be executed before benchmark.
            </summary>
        </member>
        <member name="T:BenchmarkDotNet.Code.GenericTaskDeclarationsProvider">
            <summary>
            declarations provider for <see cref="T:System.Threading.Tasks.Task`1" /> and <see cref="T:System.Threading.Tasks.ValueTask`1" />
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Configs.IConfig.KeepBenchmarkFiles">
            <summary>
            determines if all auto-generated files should be kept or removed after running benchmarks
            </summary>
        </member>
        <member name="T:BenchmarkDotNet.Diagnosers.IDiagnoser">
            The events are guaranteed to happen in the following sequence:
            Start                  // When the Benchmark run is started and most importantly BEFORE the process has been launched
            ProcessStarted         // After the Process (in a "Diagnostic" run) has been launched
            AfterBenchmarkHasRun   // After a "Warmup" iteration of the Benchmark has run, i.e. we know the [Benchmark] method has been 
                                   // executed and JITted, this is important if the Diagnoser needs to know when it can do a Memory Dump.
            ProcessStopped         // Once the Process (in a "Diagnostic" run) has stopped/completed
            Stop                   // At the end, when the entire Benchmark run has complete
            DisplayResults         // When the results/output should be displayed
        </member>
        <member name="T:BenchmarkDotNet.Exporters.IExporterDependancies">
            <summary>
            This is an internal interface, it allows Exporters to specify that 
            they depends on another Exporter (see RPlotExporter for example)
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Extensions.StringAndTextExtensions.AsValidFileName(System.String)">
            <summary>
            replaces all invalid file name chars with their number representation
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Extensions.StringAndTextExtensions.Wrap(System.String,System.Int32)">
            <summary>
            From http://bryan.reynoldslive.com/post/Wrapping-string-data.aspx
            Returns a list of strings no larger than the max length sent in.
            </summary>
            <remarks>useful function used to wrap string text for reporting.</remarks>
            <param name="text">Text to be wrapped into of List of Strings</param>
            <param name="maxLength">Max length you want each line to be.</param>
            <returns>List of strings</returns>
        </member>
        <member name="P:BenchmarkDotNet.Helpers.HostEnvironmentInfo.ProcessorName">
            <summary>
            is expensive to call (1s)
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Helpers.HostEnvironmentInfo.DotNetCliVersion">
            <summary>
            is expensive to call (creates new process)
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Helpers.HostEnvironmentInfo.ChronometerFrequency">
            <summary>
            The frequency of the timer as the number of ticks per second.
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Horology.HardwareTimerKind.System">
            <summary>
            System timer
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Horology.HardwareTimerKind.Tsc">
            <summary>
            Time Stamp Counter
            <seealso href="https://en.wikipedia.org/wiki/Time_Stamp_Counter"/>
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Horology.HardwareTimerKind.Hpet">
            <summary>
            High Precision Event Timer
            <seealso href="https://en.wikipedia.org/wiki/High_Precision_Event_Timer"/>
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Horology.TimeSpanExtensions.ToFormattedTotalTime(System.TimeSpan)">
            <summary>
            Time in the following format: {th}:{mm}:{ss} ({ts} sec)
            
            where
              {th}: total hours (two digits)
              {mm}: minutes (two digits)
              {ss}: seconds (two digits)
              {ts}: total seconds
            </summary>
            <example>TimeSpan.FromSeconds(2362) -> "00:39:22 (2362 sec)"</example>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:BenchmarkDotNet.Horology.TimeUnit.GetBestTimeUnit(System.Double[])">
            <summary>
            This method chooses the best time unit for representing a set of time measurements. 
            </summary>
            <param name="values">The list of time measurements in nanoseconds.</param>
            <returns>Best time unit.</returns>
        </member>
        <member name="P:BenchmarkDotNet.Jobs.GcMode.Server">
            <summary>
            Specifies whether the common language runtime runs server garbage collection.
            <value>false: Does not run server garbage collection. This is the default.</value>
            <value>true: Runs server garbage collection.</value>
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Jobs.GcMode.Concurrent">
            <summary>
            Specifies whether the common language runtime runs garbage collection on a separate thread.
            <value>false: Does not run garbage collection concurrently.</value>
            <value>true: Runs garbage collection concurrently. This is the default.</value>
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Jobs.GcMode.CpuGroups">
            <summary>
            Specifies whether garbage collection supports multiple CPU groups.
            <value>false: Garbage collection does not support multiple CPU groups. This is the default.</value>
            <value>true: Garbage collection supports multiple CPU groups, if server garbage collection is enabled.</value>
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Jobs.GcMode.Force">
            <summary>
            Specifies whether the BenchmarkDotNet's benchmark runner forces full garbage collection after each benchmark invocation
            <value>false: Does not force garbage collection.</value>
            <value>true: Forces full garbage collection after each benchmark invocation. This is the default.</value>
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Jobs.GcMode.AllowVeryLargeObjects">
            <summary>
            On 64-bit platforms, enables arrays that are greater than 2 gigabytes (GB) in total size.
            <value>false: Arrays greater than 2 GB in total size are not enabled. This is the default.</value>
            <value>true: Arrays greater than 2 GB in total size are enabled on 64-bit platforms.</value>
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Jobs.IJob.GcMode">
            <summary>
            no value means Host
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Jobs.IJob.IterationTime">
            <summary>
            Desired time of execution of an iteration (in ms).
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Jobs.IJob.Affinity">
            <summary>
            ProcessorAffinity for the benchmark process.
            <seealso href="https://msdn.microsoft.com/library/system.diagnostics.process.processoraffinity.aspx"/>
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Jobs.Jit.Llvm">
            <summary>
            supported only for Mono
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Jobs.JobExtensions.WithIterationTime(BenchmarkDotNet.Jobs.IJob,BenchmarkDotNet.Jobs.Count)">
            <summary>
            Create a new job as a copy of the original job with specific time of a single iteration
            </summary>
            <param name="job">Original job</param>
            <param name="iterationTime">Iteration time in Millisecond or Auto</param>
            <returns></returns>
        </member>
        <member name="P:BenchmarkDotNet.Jobs.Property`1.Value">
            <summary>
            gets the value if set, otherwise returns default value
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Jobs.Runtime.Clr">
            <summary>
            Desktop CLR
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Jobs.Runtime.Core">
            <summary>
            Cross-platform Core CLR runtime
            </summary>
        </member>
        <member name="T:BenchmarkDotNet.Loggers.LoggerWithPrefix">
            <summary>
            Adds prefix for each line
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Mathematics.MathHelper.Gauss(System.Double)">
            <summary>
            ACM Algorithm 209: Gauss
            
            Calculates $(1/\sqrt{2\pi}) \int_{-\infty}^x e^{-u^2 / 2} du$
            by means of polynomial approximations due to A. M. Murray of Aberdeen University;
            
            See: http://dl.acm.org/citation.cfm?id=367664
            </summary>        
            <param name="x">-infinity..+infinity</param>        
            <returns>Area under the Standard Normal Curve from -infinity to x</returns>
        </member>
        <member name="M:BenchmarkDotNet.Mathematics.MathHelper.Student(System.Double,System.Double)">
            <summary>
            ACM Algorithm 395: Student's t-distribution
            
            Evaluates the two-tail probability P(t|n) that t is exceeded 
            in magnitude for Student's t-distribution with n degrees of freedom.
            
            http://dl.acm.org/citation.cfm?id=355599
            </summary>
            <param name="t">t-value</param>
            <param name="n">Degree of freedom, n >= 20</param>
            <returns>2-tail p-value</returns>
        </member>
        <member name="M:BenchmarkDotNet.Mathematics.PercentileValues.Percentile(System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Calculates the Nth percentile from the set of values
            </summary>
            <remarks>
            The implementation is expected to be consitent with the one from Excel.
            It's a quite common to export bench output into .csv for further analysis 
            And it's a good idea to have same results from all tools being used.
            </remarks>
            <param name="sortedValues">Sequence of the values to be calculated</param>
            <param name="percentile">Value in range 0..100</param>
            <returns>Percentile from the set of values</returns>
        </member>
        <member name="M:BenchmarkDotNet.Mathematics.Statistics.Invert">
            <summary>
            Statistics for [1/X]. If Min is less then or equal to 0, returns null.
            </summary>        
        </member>
        <member name="M:BenchmarkDotNet.Mathematics.Statistics.Sqr">
            <summary>
            Statistics for [X^2].
            </summary>        
        </member>
        <member name="M:BenchmarkDotNet.Mathematics.Statistics.MulMean(BenchmarkDotNet.Mathematics.Statistics,BenchmarkDotNet.Mathematics.Statistics)">
            <summary>
            Mean for [X*Y].
            </summary>        
        </member>
        <member name="M:BenchmarkDotNet.Mathematics.Statistics.DivMean(BenchmarkDotNet.Mathematics.Statistics,BenchmarkDotNet.Mathematics.Statistics)">
            <summary>
            Mean for [X/Y].
            </summary>        
        </member>
        <member name="M:BenchmarkDotNet.Mathematics.Statistics.MulVariance(BenchmarkDotNet.Mathematics.Statistics,BenchmarkDotNet.Mathematics.Statistics)">
            <summary>
            Variance for [X*Y].
            </summary>        
        </member>
        <member name="M:BenchmarkDotNet.Mathematics.Statistics.DivVariance(BenchmarkDotNet.Mathematics.Statistics,BenchmarkDotNet.Mathematics.Statistics)">
            <summary>
            Variance for [X/Y].
            </summary>        
        </member>
        <member name="M:BenchmarkDotNet.Mathematics.WelchTTest.Calc(BenchmarkDotNet.Mathematics.Statistics,BenchmarkDotNet.Mathematics.Statistics)">
            <summary>
            Welch's Two Sample t-test
            </summary>
        </member>
        <member name="T:BenchmarkDotNet.Reports.Measurement">
            <summary>
            The basic captured statistics for a benchmark.
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Reports.Measurement.Operations">
            <summary>
            Gets the number of operations performed.
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Reports.Measurement.Nanoseconds">
            <summary>
            Gets the total number of nanoseconds it took to perform all operations.
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Reports.Measurement.#ctor(System.Int32,BenchmarkDotNet.Running.IterationMode,System.Int32,System.Int64,System.Double)">
            <summary>
            Creates an instance of <see cref="T:BenchmarkDotNet.Reports.Measurement"/> class.
            </summary>
            <param name="launchIndex"></param>
            <param name="iterationMode"></param>
            <param name="iterationIndex"></param>
            <param name="operations">The number of operations performed.</param>
            <param name="nanoseconds">The total number of nanoseconds it took to perform all operations.</param>
        </member>
        <member name="M:BenchmarkDotNet.Reports.Measurement.Parse(BenchmarkDotNet.Loggers.ILogger,System.String,System.Int32)">
            <summary>
            Parses the benchmark statistics from the plain text line.
            
            E.g. given the input <paramref name="line"/>:
            
                Target 1: 10 op, 1005842518 ns
            
            Will extract the number of <see cref="P:BenchmarkDotNet.Reports.Measurement.Operations"/> performed and the 
            total number of <see cref="P:BenchmarkDotNet.Reports.Measurement.Nanoseconds"/> it took to perform them.
            </summary>
            <param name="logger">The logger to write any diagnostic messages to.</param>
            <param name="line">The line to parse.</param>
            <param name="processIndex"></param>
            <returns>An instance of <see cref="T:BenchmarkDotNet.Reports.Measurement"/> if parsed successfully. <c>Null</c> in case of any trouble.</returns>
        </member>
        <member name="M:BenchmarkDotNet.Reports.MeasurementExtensions.GetOpsPerSecond(BenchmarkDotNet.Reports.Measurement)">
            <summary>
            Gets the number of operations performed per second (ops/sec).
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Reports.MeasurementExtensions.GetAverageNanoseconds(BenchmarkDotNet.Reports.Measurement)">
            <summary>
            Gets the average duration of one operation in nanoseconds.
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Reports.Summary.Item(BenchmarkDotNet.Running.Benchmark)">
            <summary>
            Returns a report for the given benchmark or null if there is no a corresponded report.
            </summary>        
        </member>
        <member name="F:BenchmarkDotNet.Running.IterationMode.Pilot">
            <summary>
            <seealso href="https://en.wikipedia.org/wiki/Pilot_experiment"/>
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Running.IterationMode.IdleWarmup">
            <summary>
            Warmup for idle method (overhead)
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Running.IterationMode.IdleTarget">
            <summary>
            Idle method (overhead)
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Running.IterationMode.MainWarmup">
            <summary>
            Warmup for main benchmark iteration (with overhead)
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Running.IterationMode.MainTarget">
            <summary>
            Main benchmark iteration (with overhead)
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Running.IterationMode.Result">
            <summary>
            Target - TargetIdle (without overhead)
            </summary>
        </member>
        <member name="F:BenchmarkDotNet.Running.IterationMode.Unknown">
            <summary>
            Unknown 
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Toolchains.GeneratorBase.GetProgramName(BenchmarkDotNet.Running.Benchmark,BenchmarkDotNet.Configs.IConfig)">
            <summary>
            when config is set to KeepBenchmarkFiles we use benchmark.ShortInfo as name,
            otherwise (default) "BDN.Auto", mostly to prevent PathTooLongException
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliBuilder.Build(BenchmarkDotNet.Toolchains.Results.GenerateResult,BenchmarkDotNet.Loggers.ILogger,BenchmarkDotNet.Running.Benchmark)">
            <summary>
            generates project.lock.json that tells compiler where to take dlls and source from
            and builds executable and copies all required dll's
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliGenerator.GetBuildArtifactsDirectoryPath(BenchmarkDotNet.Running.Benchmark,System.String)">
            <summary>
            we need our folder to be on the same level as the project that we want to reference
            we are limited by xprojs (by default compiles all .cs files in all subfolders, Program.cs could be doubled and fail the build)
            and also by nuget internal implementation like looking for global.json file in parent folders
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliGenerator.GetBinariesDirectoryPath(System.String)">
            <summary>
            we use custom output path in order to avoid any future problems related to dotnet cli ArtifactsPaths changes
            </summary>
        </member>
        <member name="M:BenchmarkDotNet.Toolchains.DotNetCli.DotNetCliGenerator.GetPackageVersion(System.Reflection.AssemblyName)">
            <summary>
            we can not simply call assemblyName.Version.ToString() because it is different than package version which can contain (and often does) text
            we are using the wildcard to get latest version of package/project restored
            </summary>
        </member>
        <member name="P:BenchmarkDotNet.Validators.CompositeValidator.TreatsWarningsAsErrors">
            <summary>
            returns true if any of the validators has TreatsWarningsAsErrors == true
            </summary>
        </member>
        <member name="T:SimpleJson.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray"/> class. 
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray"/> class. 
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:SimpleJson.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:SimpleJson.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:SimpleJson.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject"/>.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:SimpleJson.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:SimpleJson.SimpleJson">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and JsonObject(IDictionary&lt;string,object>).
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:SimpleJson.SimpleJson.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.SerializeObject(System.Object,SimpleJson.IJsonSerializerStrategy)">
            <summary>
            Converts a IDictionary&lt;string,object> / IList&lt;object> object into a JSON string
            </summary>
            <param name="json">A IDictionary&lt;string,object> / IList&lt;object></param>
            <param name="jsonSerializerStrategy">Serializer strategy to use</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
    </members>
</doc>
